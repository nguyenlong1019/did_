1. Tìm hiểu lý thuyết cơ bản
1.1 Mã định danh phi tập trung (DID):
DID là một tiêu chuẩn được phát triển bởi W3C để cung cấp một cách 
định danh duy 
nhất và không phụ thuộc vào tổ chức trung gian.
DID kết hợp với sổ cái blockchain để tạo sự tin cậy phi tập trung.

1.2 Ứng dụng của DID trong chứng thực khóa công khai:
Cung cấp phương pháp tin cậy để quản lý khóa công khai.
Giảm thiểu sự phụ thuộc vào tổ chức chứng thực trung gian 
(Certificate Authority - CA).
Đảm bảo rằng người dùng có thể xác thực và 
quản lý khóa công khai của họ thông qua DID.

1.3 Các thành phần chính của DID:
DID Document: Tài liệu mô tả DID, chứa thông tin metadata và khóa 
công khai.
DID Resolver: Thành phần truy xuất DID từ sổ cái blockchain.
Verifiable Credential: Dữ liệu chứng thực liên kết với DID, ví dụ: thông tin nhận dạng.



2. Công nghệ cần sử dụng
2.1 Blockchain
Chọn một nền tảng blockchain để lưu trữ DID Document, ví dụ:
Ethereum (kết hợp với thư viện như web3.py hoặc Nethereum).

Hyperledger Indy (một nền tảng chuyên hỗ trợ DID). (Đề tài này 
chọn Hyperledger Indy Node Python để thực hiện)

IPFS: Lưu trữ DID Document phi tập trung.

2.2 Python Libraries
Cryptography: Tạo và xác thực cặp khóa công khai/riêng tư.
Web3.py: Tương tác với Ethereum blockchain. 
DIDKit hoặc PyDID: Hỗ trợ xây dựng DID theo tiêu chuẩn W3C.
JSON-LD: Xử lý dữ liệu DID Document.


3.1 Quy trình làm việc
Người dùng tạo DID:

Sinh cặp khóa công khai/riêng tư.
Tạo tài liệu DID Document.
Đăng ký DID Document lên blockchain/IPFS. (sử dụng Hyperledger 
Indy Node)
Quản lý khóa công khai:

Người dùng hoặc bên thứ ba truy vấn DID Document.
Xác thực khóa công khai bằng cách kiểm tra thông tin trên 
blockchain.
Xác thực chữ ký số:

Sử dụng khóa công khai trong DID Document để xác thực chữ ký số.
3.2 Mô hình triển khai
Frontend: Giao diện người dùng để tạo và quản lý DID.
Backend:
API quản lý DID (REST hoặc gRPC). (Sử dụng REST, một là tự viết 
bằng DJANGO, 2 là dùng Django Rest Framework)
Kết nối với blockchain để đăng ký và truy vấn DID Document.
Blockchain Layer:
Sổ cái lưu trữ DID Document.
Verifiable Credential Layer:
Xác thực thông tin dựa trên DID và chứng chỉ.

Đọc thêm về DSA hoặc RSA (k đọc cũng được chỉ cần áp dụng để tạo 
ra được public key và private key)

Code base đọc cũng được không đọc cũng được vì dùng web3 


Nên dùng Django đi cho nhanh
5. Tạo một giao diện đơn giản
Sử dụng Flask để xây dựng giao diện quản lý DID:

Trang tạo DID: Người dùng nhập thông tin, sinh khóa, và lưu DID Document.
Trang xác thực: Nhập DID để kiểm tra và xác thực khóa công khai.


6. Báo cáo và tài liệu
6.1 Nội dung báo cáo
Tổng quan về DID và blockchain.
Ứng dụng DID trong chứng thực khóa công khai.
Mô hình hệ thống và kiến trúc.
Chi tiết mã nguồn và triển khai.
Kết quả và đánh giá.
6.2 Demo
Hiển thị giao diện Flask.
Minh họa việc tạo DID, lưu DID Document, và xác thực chữ ký số.
